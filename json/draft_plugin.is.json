{
    "type": "plugin",
    "data": "/// @ 0.16.0\n### {\n    name: \"下書きプラグイン\",\n    id: \"36f1f85b-24af-4eec-b4fd-91c2bd511cc3\",\n    version: \"1.0.0\",\n    author: \"@yamada_20020924@voskey.icalo.net\",\n    description: \"下書きの保存、読み込みをできる。\",\n    permissions: [\"write:account\"]\n}\n\n//レジストリのドメインは自動で生成されるっぽい？\n//定数\nlet registryKey = \"draft_plugin\"\nlet registryScope = [\"client\", \"plugin\", \"yamada_20020924\"]\nlet getRegistryParms = {key: registryKey, scope: registryScope}\nlet setRegistryParms = Obj:copy(getRegistryParms)\nsetRegistryParms.value = {}\n\n//レジストリがない場合、作成する。\nlet result = Mk:api(\"i/registry/get\", getRegistryParms)\nif (Core:type(result)==\"error\"&&result.info.id==\"ac3ed68a-62f0-422b-a7bc-d5e09e8f6a6a\") Mk:api(\"i/registry/set\", setRegistryParms)\n\n@saveDraft(form){\n    //下書きデータを取得\n    let result = Mk:api(\"i/registry/get\", getRegistryParms)\n    //データを識別するIDを生成\n    let setKey = Util:uuid()\n    //保存するデータを定義\n    let data = form\n    //データを追加\n    setRegistryParms.value[setKey] = data\n    //下書きデータの上書き\n    Mk:api(\"i/registry/set\", setRegistryParms)\n}\n\n@showDraft(){\n    //下書きデータを取得\n    let result = Mk:api(\"i/registry/get\", getRegistryParms)\n    let resultKvs = Obj:kvs(result)\n    var data = resultKvs.map(@(resultvalue){`{resultvalue[0]}{Str:lf}{Json:stringify(resultvalue[1])}`}).join(`{Str:lf}{Str:lf}`)\n    Mk:dialog(null, data, \"info\")\n}\n\n@loadDraft(form, update){\n    //下書きデータの取得\n    let result = Mk:api(\"i/registry/get\", getRegistryParms)\n    let getKey = readline(\"下書き呼び出しkeyを入力\")\n    if (getKey==\"\") return null\n    if (Core:type(getKey)!=\"str\"||result[getKey]==null) return Mk:dialog(\"DATA KEY ERROR\", `呼び出しkeyが不正です。{Str:lf}適切な鍵を入力してください。`, \"error\")\n    //読み込むかチェック\n    if (form.cw!=null||form.text==null) if (!Mk:confirm(\"下書きを読み込みますか？\", \"現在の入力状態は破棄されます。\", \"question\")) return null\n    let draftFormPairs = Obj:kvs(result[getKey])\n    draftFormPairs.map(@(draftFormPair){update(draftFormPair[0], draftFormPair[1])})\n    //下書きデータの削除\n    let data = Obj:kvs(result).filter(@(pair){pair[0]!=getKey}).reduce(@(a,v){\n        a[v[0]]=v[1]\n        a\n    },{})\n    //削除したデータをセット\n    setRegistryParms.value = data\n    Mk:api(\"i/registry/set\", setRegistryParms)\n}\n\n@clearDraft(){\n    if (Mk:confirm(\"本当に削除しますか？\", \"この作業を取り消すことはできません。\", \"question\")) {\n        setRegistryParms.value = {}\n        Mk:api(\"i/registry/set\", setRegistryParms)\n        Mk:dialog(\"完了通知\", \"削除しました\", \"success\")\n    }\n}\n\nPlugin:register_post_form_action(\"下書きを保存\", saveDraft)\nPlugin:register_post_form_action(\"下書き一覧\", showDraft)\nPlugin:register_post_form_action(\"下書きを読み込み\", loadDraft)\nPlugin:register_post_form_action(\"下書きを全削除\", clearDraft)"
}
